@startuml

package webrtc
{
    class EncodedImageCallback
    {
        void OnEncodedImage();
    }

    class RtpVideoSenderInterface 
    {

    }

    EncodedImageCallback <|-- RtpVideoSenderInterface

    class RTPSenderVideo
    {
        RTPSender*          rtp_sender_
        SendEncodedImage();
        SendVideo();
        LogAndSendToNetwork();
    }

    class RtpPacketSender
    {
        EnqueuePackets();
    }

    class RtpPacketHistory
    {

    }

    class TransportFeedbackObserver
    {
        void OnAddPacket();
        void OnTransportFeedback();
    }

    class RtpSenderEgress
    {
        RtpPacketHistory*          rtp_packet_history;
        TransportFeedbackObserver* feed_back;
        AddPacketToTransportFeedback();
    }

    RtpPacketHistory --* RtpSenderEgress  

    class NonPacedPacketSender
    {
        uint16_t transport_sequence_number_;
        RtpSenderEgress*        sender;
        EnqueuePackets();
        PrepareForSend();
    }

    RtpSenderEgress --* NonPacedPacketSender

    class PacketSender
    {
        SendPacket();
    }

    class PacketRouter
    {
        ModuleRtpRtcpImpl2  *rtpModule;
        SendPacket(); 做序列号的递增
    }

    ModuleRtpRtcpImpl2 --* PacketRouter

    PacketSender <|-- PacketRouter

    class PacingController
    {
        PacketSender*       packet_sender;
        PacketQueue         packet_queue;
        EnqueuePacket();
        ProcessPacket();
        GetPendingPacket();
    }

    class Module
    {
        process();
    }

    class PacedSender
    {
        PacketRouter*           packet_router;
        PacingController        pacing_controller;
        EnqueuePackets();
        process(); 调用controller 的ProcessPacket
    }

    PacketRouter --* PacedSender
    Module <|-- PacedSender

    PacingController --* PacedSender
    PacketSender --* PacingController

    RtpPacketSender <|-- PacedSender
    RtpPacketSender <|-- NonPacedPacketSender

    class RTPSender
    {
        RtpPacketSender*      paced_sender_;  
        EnqueuePackets();
    }

    RtpPacketSender --* RTPSender

    class RtpSenderContext
    {
        RtpPacketHistory packet_history;
        RtpSenderEgress packet_sender;
        RtpSenderEgress::NonPacedPacketSender non_paced_sender;
        RTPSender packet_generator; 三元组生成
    }

    RtpPacketHistory --* RtpSenderContext  

    RTPSender --* RTPSenderVideo

    RtpSenderEgress --* RtpSenderContext

    RTPSender --* RtpSenderContext

    class ModuleRtpRtcpImpl2
    {
        RtpSenderContext*                  rtp_sender;
    }

    RtpSenderContext --* ModuleRtpRtcpImpl2

    class RtpStreamSender
    {
        ModuleRtpRtcpImpl2*         rtp_rtcp;
        RTPSenderVideo*             sender_video;
        VideoFecGenerator*          fec_generator;
    }

    ModuleRtpRtcpImpl2 --* RtpStreamSender
    RTPSenderVideo --* RtpStreamSender

    class RtpVideoSender
    {
        OnEncodedImage();
        CreateRtpStreamSenders();
        vector<RtpStreamSender> *rtp_streams;
    }
    RtpStreamSender --* RtpVideoSender

    RtpVideoSenderInterface <|-- RtpVideoSender

    class RtpTransportControllerSendInterface
    {

    }

    class TransportFeedbackDemuxer
    {
        OnAddPacket();handle
        OnTransportFeedback();handle
    }

    class RtpTransportControllerSend
    {
        TransportFeedbackDemuxer feedback_demuxer;
        RtpVideoSenderInterface* CreateRtpVideoSender();
        void OnAddPacket();
        void OnTransportFeedback();
    }

    TransportFeedbackDemuxer --* RtpTransportControllerSend
    RtpTransportControllerSendInterface <|-- RtpTransportControllerSend
    TransportFeedbackObserver <|-- RtpTransportControllerSend

    package Video 
    {
        class EncoderSink
        {

        }

        EncodedImageCallback <|-- EncoderSink

        class VideoSendStreamImpl
        {
            void OnEncodedImage();
            RtpVideoSenderInterface* rtp_video_sender;
            RtpTransportControllerSendInterface* transport;
        }
        RtpTransportControllerSendInterface --* VideoSendStreamImpl
        EncoderSink <|-- VideoSendStreamImpl
        RtpVideoSenderInterface --* VideoSendStreamImpl

        class VideoSendStream 
        {
            VideoSendStreamImpl* send_stream_;
        }

        VideoSendStreamImpl --* VideoSendStream
    }

    class Call 
    {
        RtpTransportControllerSendInterface* transport_send_ptr_;
    }

    RtpTransportControllerSendInterface --* Call
}


@enduml
